#!/bin/bash

# === Technitium DNS Server Installer with Firewall Configuration ===
# Compatible with ezy-install framework
# Author: MikeSierra
# License: Apache-2.0

set -e

# === Check for sudo availability ===
if ! command -v sudo >/dev/null 2>&1; then
  echo "'sudo' is required but not installed. Please install sudo and try again."
  exit 1
fi

# === Open required firewall ports ===
echo ""
echo "Opening required firewall ports..."

ports=(
  "5380/tcp"    # Web console (HTTP)
  "53443/tcp"   # Web console (HTTPS)
  "53/udp"      # DNS
  "53/tcp"      # DNS
  "853/udp"     # DNS-over-QUIC
  "853/tcp"     # DNS-over-TLS
  "443/udp"     # DNS-over-HTTPS (HTTP/3)
  "443/tcp"     # DNS-over-HTTPS (HTTP/1.1/2)
  "80/tcp"      # HTTP (Let's Encrypt, proxy)
  "67/udp"      # DHCP (optional)
)

for port in "${ports[@]}"; do
  echo "Adding port $port..."
  sudo firewall-cmd --permanent --add-port="$port"
done

echo "Reloading firewalld..."
sudo firewall-cmd --reload

echo ""
echo "Firewall ports configured."

# === Define installation paths and versions ===
dotnetDir="/opt/dotnet"
dotnetVersion="8.0"
dotnetRuntime="Microsoft.AspNetCore.App 8.0."
dotnetUrl="https://dot.net/v1/dotnet-install.sh"

if [ -d "/etc/dns/config" ]; then
  dnsDir="/etc/dns"
else
  dnsDir="/opt/technitium/dns"
fi

dnsConfig="/etc/dns"
dnsTar="$dnsDir/DnsServerPortable.tar.gz"
dnsUrl="https://download.technitium.com/dns/DnsServerPortable.tar.gz"
installLog="$dnsDir/install.log"

echo ""
echo "==============================="
echo " Technitium DNS Installer"
echo "==============================="

mkdir -p "$dnsDir"
echo "" > "$installLog"

# === Check for .NET Runtime ===
if dotnet --list-runtimes 2> /dev/null | grep -q "$dotnetRuntime"; then
  dotnetFound="yes"
else
  dotnetFound="no"
fi

if [ ! -d "$dotnetDir" ] && [ "$dotnetFound" = "yes" ]; then
  echo "ASP.NET Core Runtime is already installed."
else
  echo "Installing ASP.NET Core Runtime..."
  curl -sSL "$dotnetUrl" | bash /dev/stdin -c "$dotnetVersion" --runtime aspnetcore --no-path --install-dir "$dotnetDir" --verbose >> "$installLog" 2>&1

  if [ ! -f "/usr/bin/dotnet" ]; then
    sudo ln -s "$dotnetDir/dotnet" /usr/bin >> "$installLog" 2>&1
  fi

  if dotnet --list-runtimes 2> /dev/null | grep -q "$dotnetRuntime"; then
    echo "ASP.NET Core Runtime installed successfully."
  else
    echo "Failed to install ASP.NET Core Runtime. Check '$installLog'."
    exit 1
  fi
fi

# === Download Technitium DNS Server ===
echo ""
echo "Downloading Technitium DNS Server..."
if ! curl -o "$dnsTar" --fail "$dnsUrl" >> "$installLog" 2>&1; then
  echo "Failed to download: $dnsUrl"
  exit 1
fi

if [ -d "$dnsConfig" ]; then
  echo "Updating Technitium DNS Server..."
else
  echo "Installing Technitium DNS Server..."
fi

sudo tar -zxf "$dnsTar" -C "$dnsDir" >> "$installLog" 2>&1

# === Check ICU requirement ===
echo ""
if dotnet "$dnsDir/DnsServerApp.dll" --icu-test >> "$installLog" 2>&1; then
  echo "ICU package is already installed."
else
  echo "Installing required ICU package..."

  if command -v apt-get >/dev/null 2>&1; then
    sudo apt-get update >> "$installLog" 2>&1
    sudo apt-get install -y libicu-dev libicu70 libicu72 libicu74 || sudo apt-get install -y libicu* >> "$installLog" 2>&1
  elif command -v dnf >/dev/null 2>&1; then
    sudo dnf install -y libicu >> "$installLog" 2>&1
  elif command -v yum >/dev/null 2>&1; then
    sudo yum install -y libicu >> "$installLog" 2>&1
  elif command -v zypper >/dev/null 2>&1; then
    sudo zypper install -y libicu >> "$installLog" 2>&1
  elif command -v pacman >/dev/null 2>&1; then
    sudo pacman -Sy --noconfirm icu >> "$installLog" 2>&1
  elif command -v apk >/dev/null 2>&1; then
    sudo apk add --no-cache icu >> "$installLog" 2>&1
  else
    echo "Could not determine package manager. Install ICU manually."
    exit 1
  fi

  if dotnet "$dnsDir/DnsServerApp.dll" --icu-test >> "$installLog" 2>&1; then
    echo "ICU installed successfully."
  else
    echo "ICU installation failed. Please install it manually."
    exit 1
  fi
fi

# === Check for systemd ===
echo ""
if ! [ "$(ps --no-headers -o comm 1)" = "systemd" ]; then
  echo "systemd not detected. Cannot configure service."
  exit 1
fi

# === Setup systemd service ===
if [ -f "/etc/systemd/system/dns.service" ]; then
  echo "Restarting existing systemd service..."
  sudo systemctl restart dns.service >> "$installLog" 2>&1
else
  echo "Creating systemd service..."
  sudo cp "$dnsDir/systemd.service" /etc/systemd/system/dns.service
  sudo systemctl enable dns.service >> "$installLog" 2>&1

  sudo systemctl stop systemd-resolved || true
  sudo systemctl disable systemd-resolved || true
  sudo systemctl start dns.service >> "$installLog" 2>&1

  sudo rm -f /etc/resolv.conf
  echo -e "# Generated by Technitium DNS Installer\n\nnameserver 127.0.0.1" | sudo tee /etc/resolv.conf >/dev/null

  if [ -f "/etc/NetworkManager/NetworkManager.conf" ]; then
    echo -e "[main]\ndns=default" | sudo tee -a /etc/NetworkManager/NetworkManager.conf >/dev/null
  fi
fi

# === Final output ===
echo ""
echo "Technitium DNS Server installed successfully!"
echo "Access the web console at: http://$(hostname -I | awk '{print $1}'):5380/"
echo "Support the project: https://www.patreon.com/technitium"
echo "ezy-install added all required firewall rules."
